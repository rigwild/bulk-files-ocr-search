#!/usr/bin/env node

/**
 * OCR Search - üîç Find files that contain some text with OCR
 * Copyright (C) 2021  rigwild <me@rigwild.dev> (https://github.com/rigwild)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

// @ts-check

import fs from 'fs-extra'
import meow from 'meow'
import dirTree from 'directory-tree'

const cli = meow(
  `
  Usage
    $ ocr-search-clean [--pdf] [--txt] <input_files>

  Options
    --pdf  Remove images that were generated by PDF files pages extraction (e.g."file.pdf-1.png")
    --txt  Remove text files that were generated by OCR (option "--save-ocr" in "ocr-search")

  https://github.com/rigwild/ocr-search
`,
  {
    // @ts-ignore
    importMeta: import.meta,
    description: 'üóëÔ∏è Find and remove content generated by ocr-search',
    flags: {
      pdf: {
        type: 'boolean',
        default: false
      },
      txt: {
        type: 'boolean',
        default: false
      }
    }
  }
)

/** @param {dirTree.DirectoryTree} tree */
const cleanExtractedRecursive = async tree => {
  let removedCount = 0
  if (tree.type === 'file') {
    if (
      (cli.flags.pdf && tree.name.match(/^.+\.pdf-\d+\.png$/)) ||
      (cli.flags.txt && tree.name.match(/^.+\.\w+\.ocr-content.txt$/))
    ) {
      await fs.remove(tree.path)
      console.log(`Removed ${tree.path}`)
      removedCount++
    }
  } else if (tree.type === 'directory' && tree.children) {
    for (const child of tree.children) {
      removedCount += await cleanExtractedRecursive(child)
    }
  }
  return removedCount
}

;(async () => {
  for (const input of cli.input) {
    const tree = dirTree(input, { attributes: ['type'] })
    const removedCount = await cleanExtractedRecursive(tree)
    console.log(`${removedCount} files were removed!`)
  }
})()
